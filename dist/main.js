/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_RenderUI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/RenderUI */ \"./src/modules/RenderUI.js\");\n\r\n\r\n(0,_modules_RenderUI__WEBPACK_IMPORTED_MODULE_0__.init)();\r\n\r\nconsole.log(\"index cringe\");\n\n//# sourceURL=webpack://todolistproject/./src/index.js?");

/***/ }),

/***/ "./src/modules/Project.js":
/*!********************************!*\
  !*** ./src/modules/Project.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\r\nclass Project {\r\n\r\n    constructor(title) {\r\n        this.title = title;\r\n        this.tasks = [];\r\n    }\r\n\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n\r\n    setTitle(title) {\r\n        this.title = title;\r\n    }\r\n\r\n    getTasks() {\r\n        return this.tasks;\r\n    }\r\n\r\n    findTask(taskName) {\r\n        return this.tasks.find((task) => task.getName() === taskName);\r\n    }\r\n\r\n    addTask(task) {\r\n        this.tasks.push(task);\r\n    }\r\n\r\n    deleteTask(taskName) {\r\n        this.tasks = this.tasks.filter(task => task.name !== taskName);\r\n    }\r\n\r\n    updateTask(currentTask, newTaskName, newTaskDesc, newTaskPriority) {\r\n        const task = this.tasks.find((task) => task.getName() === currentTask.getName());\r\n        this.deleteTask(currentTask.getName());\r\n        task.setName(newTaskName);\r\n        task.setDescription(newTaskDesc);\r\n        task.setPriority(newTaskPriority);\r\n        this.tasks.push(task);\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Project);\n\n//# sourceURL=webpack://todolistproject/./src/modules/Project.js?");

/***/ }),

/***/ "./src/modules/RenderUI.js":
/*!*********************************!*\
  !*** ./src/modules/RenderUI.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": () => (/* binding */ init)\n/* harmony export */ });\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Project */ \"./src/modules/Project.js\");\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Task */ \"./src/modules/Task.js\");\n/* harmony import */ var _ToDoList__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ToDoList */ \"./src/modules/ToDoList.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/* ========== CACHEDOM ========== */\r\nconst sideBarProjectsDOM = document.querySelector('.sidebar-projects');\r\nconst mainBodyDOM = document.querySelector('.main-body');\r\nconst addNewProjectDOM = document.querySelector('.sidebar-card-add-project');\r\n\r\n/* ========== EVENT LISTENERS GLOBAL ========== */\r\n\r\n    // Clicking ADD NEW PROJECT loads the Project Form\r\nfunction newProjectListener(addNewProject) {\r\n    addNewProject.addEventListener('click', (e) => {\r\n        console.log('clicked add new project');\r\n        updateCurrentProject(null);\r\n        currentPageRenderer(toDoListProjectsTempData, renderProjectForm(cancelForm, submitProject));\r\n    });\r\n}\r\n\r\n\r\n/* ========== DATA HANDLER FUNCTIONS ========== */\r\n\r\n// Grabbing Projects From The ToDoList\r\nlet toDoListProjectsTempData = _ToDoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getProjects();\r\n\r\n// Current Projects and Tasks\r\nlet currentProject = null;\r\nlet currentTask = null;\r\n\r\n// Get Project Data: Returns Object\r\nfunction grabProjectData(project) {\r\n    const projectObjData = {};\r\n    projectObjData.title = project.getTitle();\r\n    projectObjData.tasks = project.getTasks();\r\n    return projectObjData;\r\n}\r\n\r\n// Get Task Data: Returns Object\r\nfunction grabTaskData(task) {\r\n    const taskObjData = {};\r\n    taskObjData.name = task.getName();\r\n    taskObjData.description = task.getDescription();\r\n    taskObjData.priority = task.getPriority();\r\n    return taskObjData;\r\n}\r\n\r\n\r\nfunction updateCurrentProject(selectedProject) {\r\n    currentProject = selectedProject;\r\n    console.log('updated current project!');\r\n}\r\n\r\nfunction updateCurrentTask(selectedTask) {\r\n    currentTask = selectedTask;\r\n    console.log('updated current task!');\r\n}\r\n\r\n/* ========== INITIALIZE PAGE LOAD ========== */\r\n\r\nfunction init() {\r\n    initialPageRender(toDoListProjectsTempData);\r\n    newProjectListener(addNewProjectDOM);\r\n}\r\n\r\n/* ========== INITIAL AND CURRENT RENDERING ========== */\r\nfunction initialPageRender(projects) {\r\n    const placeHolder = document.createElement('div');\r\n    renderSideBar(sideBarProjectsDOM, projects);\r\n    renderToMainBody(mainBodyDOM, placeHolder);\r\n    // renderToMainBody(mainBodyDOM, renderSelectedProjectTasks(toDoListProjectsTempData[0], taskSelected, taskDeleted));\r\n    // renderToMainBody(mainBodyDOM, renderSelectedTask(toDoListProjectsTempData[0].getTasks()[1]));\r\n    // renderToMainBody(mainBodyDOM, renderProjectForm());\r\n    // renderToMainBody(mainBodyDOM, renderTaskForm());\r\n\r\n}\r\n\r\n// This is the function that will be called the majority of the time\r\nfunction currentPageRenderer(projects, mainContent) {\r\n    renderSideBar(sideBarProjectsDOM, projects);\r\n    renderToMainBody(mainBodyDOM, mainContent);\r\n}\r\n\r\nfunction renderToMainBody(main, content) {\r\n    removeAllChildrenNodesMain(main); // Clears the children nodes then adds the wanted content\r\n    main.appendChild(content);\r\n}\r\n\r\n// For removing all the children nodes in Main\r\nfunction removeAllChildrenNodesMain(parent) {\r\n    while (parent.childNodes.length > 1) {\r\n        parent.removeChild(parent.lastChild);\r\n    }\r\n}\r\n\r\nfunction renderSideBar(side, projects) {\r\n    removeAllChildrenNodesSide(side);\r\n    projects.forEach(project => {\r\n        const sideprojectcard = renderSideProject(project, projectSelected, projectDeleted);\r\n        // side.appendChild(sideprojectcard); // Inserts below new project\r\n        side.insertBefore(sideprojectcard, side.firstChild) // Inserts above new project\r\n    });\r\n}\r\n\r\n// For removing all the chidlren nodes in Side\r\nfunction removeAllChildrenNodesSide(parent) {\r\n    while (parent.childNodes.length > 4) {\r\n        parent.removeChild(parent.firstChild);\r\n    }\r\n}\r\n\r\n\r\n/* ========== HTML ELEMENT CREATION ========== */\r\n// Includes the event handler on click with creation\r\n\r\nfunction renderSideProject(project, selectedFunc, deletedFunc) {\r\n    const data = grabProjectData(project);\r\n    const title = data.title;\r\n    // const tasks = data.tasks;\r\n\r\n    // Organizing Element\r\n    const cardContainer = document.createElement('div');\r\n    cardContainer.classList.add(\"container\", \"u-full-width\", \"py-1\");\r\n\r\n    // Actual Card Element that we use an event listener on\r\n    const sideBarCard = document.createElement('div');\r\n    sideBarCard.classList.add(\"sidebar-card\");\r\n    sideBarCard.innerHTML = `\r\n        <img src=\"images/list.svg\" alt=\"\" class=\"sidebar-card-icon\">\r\n        <div class=\"sidebar-card-title text-center\">\r\n            ${title}\r\n        </div>\r\n        <img src=\"images/delete.svg\" alt=\"\" class=\"sidebar-card-delete-icon\">\r\n    `;\r\n    cardContainer.appendChild(sideBarCard);\r\n\r\n    // Handles Selection and Deletion\r\n    sideBarCard.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('sidebar-card-delete-icon')) {\r\n            deletedFunc(title);\r\n        } else {\r\n            updateCurrentProject(project);\r\n            selectedFunc(data);\r\n        }\r\n    });\r\n    return cardContainer;\r\n}\r\n\r\nfunction renderSelectedProjectTasks(projectData, selectedFunc, deletedFunc) {\r\n    // const data = grabProjectData(project);\r\n    const title = projectData.title;\r\n    const taskData = projectData.tasks;\r\n\r\n    const mainContentContainer = document.createElement('div');\r\n    mainContentContainer.classList.add('py-1');\r\n\r\n    const titleContainer = document.createElement('div');\r\n    titleContainer.classList.add('project-title-container');\r\n    titleContainer.innerHTML = `\r\n        <h6 class=\"text-center project-title\">${title}</h6>\r\n        <img src=\"images/edit.svg\" alt=\"\" class=\"project-title-edit-icon\">\r\n    `\r\n    mainContentContainer.appendChild(titleContainer);\r\n\r\n    titleContainer.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('project-title-edit-icon')) {\r\n            console.log('cliked title edit icon!');\r\n            currentPageRenderer(toDoListProjectsTempData, renderProjectForm(cancelForm, submitProject, e.target.previousElementSibling.innerText));\r\n        }\r\n    });\r\n\r\n    const projectTaskListContainer = document.createElement('div');\r\n    projectTaskListContainer.classList.add('project-list', 'u-full-width');\r\n    mainContentContainer.appendChild(projectTaskListContainer);\r\n\r\n    taskData.forEach(task => {\r\n        const name = task.name;\r\n        // const description = task.description;\r\n        // const priority = task.priority; // Maybe could add some sick UI to show priority\r\n\r\n        const projectListItem = document.createElement('div');\r\n        projectListItem.classList.add('project-list-item', 'my-1');\r\n\r\n        projectListItem.innerHTML = `\r\n            <img src=\"images/right-arrow.svg\" alt=\"\" class=\"project-list-item-icon\">\r\n            <div class=\"project-list-item-title\">${name}</div>\r\n            <img src=\"images/delete.svg\" alt=\"\" class=\"project-list-item-delete\">\r\n        `\r\n        // projectTaskListContainer.appendChild(projectListItem);\r\n        projectTaskListContainer.insertBefore(projectListItem, projectTaskListContainer.firstChild) // Inserts above new project\r\n\r\n    });\r\n\r\n    // Making sure the last child is the 'Add a new task' task\r\n    const addNewItemLast = document.createElement('div');\r\n    addNewItemLast.classList.add('project-list-add-item');\r\n    addNewItemLast.innerHTML = `\r\n        <img src=\"images/plus.svg\" alt=\"\" class=\"project-list-item-icon\">\r\n        <div class=\"project-list-item-title\">Add a new task</div>\r\n    `\r\n    mainContentContainer.appendChild(addNewItemLast);\r\n\r\n\r\n    // Event Handling; CHEESING \"Add a new task\" task\r\n    mainContentContainer.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('project-list-item-delete')) {\r\n            deletedFunc(e.target.previousElementSibling.innerText); // Gets the title of the task\r\n        } else if (e.target.classList.contains('project-list-add-item') || e.target.innerText === \"Add a new task\") {\r\n            console.log('adding new item!');\r\n            currentPageRenderer(toDoListProjectsTempData, renderTaskForm(cancelForm, submitTask));\r\n        } else {\r\n            taskData.forEach(task => {\r\n                if (e.target.innerText === task.name) {\r\n                    updateCurrentTask(task);\r\n                    selectedFunc(task, projectData);\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    return mainContentContainer;\r\n}\r\n\r\nfunction renderSelectedTask(task, backFunc, editFunc, deleteFunc, currentProj) {\r\n    const name = task.name;\r\n    const description = task.description;\r\n    const priority = task.priority;\r\n\r\n\r\n    const selectedTaskContainer = document.createElement('div');\r\n    selectedTaskContainer.classList.add('selected-task', 'py-4', 'my-5');\r\n\r\n    selectedTaskContainer.innerHTML = `\r\n        <img src=\"images/back-button.svg\" alt=\"\" class=\"selected-task-back-icon\">\r\n        <img src=\"images/edit.svg\" alt=\"\" class=\"selected-task-edit-icon\">\r\n        <img src=\"images/delete.svg\" alt=\"\" class=\"selected-task-delete-icon\">\r\n        \r\n        <div class=\"task-title-container\">\r\n            <h6 class=\"text-center task-title\">${name}</h6>\r\n        </div>\r\n        <div class=\"task-description\">\r\n            <p>\r\n                ${description}\r\n            </p>\r\n        </div>\r\n        <div class=\"task-priority\">\r\n            <p>Task Priority: ${priority}</p>\r\n        </div>\r\n    `\r\n\r\n    selectedTaskContainer.addEventListener('click', (e) => {\r\n        if (e.target.classList.contains('selected-task-back-icon')) {\r\n            console.log('clicked back!');\r\n            backFunc(currentProj);\r\n        }\r\n        if (e.target.classList.contains('selected-task-edit-icon')) {\r\n            // Need to pass editFunc an object filled with the details of the current task\r\n            const taskDetailsObj = {}\r\n            const childNodes = e.target.parentNode.childNodes;\r\n            taskDetailsObj.name = childNodes[7].innerText;\r\n            taskDetailsObj.description = childNodes[9].innerText;\r\n            taskDetailsObj.priority = childNodes[11].innerText;\r\n            editFunc(taskDetailsObj);\r\n        }\r\n        if (e.target.classList.contains('selected-task-delete-icon')) {\r\n            console.log('clicked delete!');\r\n            deleteFunc(name);\r\n        }\r\n    });\r\n\r\n    return selectedTaskContainer;\r\n}\r\n\r\nfunction renderProjectForm(cancelFunc, submitFunc, projectTitle = '') {\r\n    const formContainer = document.createElement('form');\r\n    formContainer.classList.add('task-project-form', 'my-4');\r\n    formContainer.innerHTML = `\r\n        <h6 class=\"text-center\">New Project</h6>\r\n\r\n        <label for=\"projectName\">Project Name</label>\r\n        <input type=\"text\" class=\"u-full-width project-input\" id=\"projectName\" value=\"${projectTitle}\">\r\n        \r\n        <button class=\"button-primary\" id=\"cancel\">Cancel</button>\r\n        <input class=\"button-primary\" type=\"submit\" value=\"submit\">\r\n    `\r\n\r\n    formContainer.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n        console.log('submitted!');\r\n        submitFunc(e.path[0].childNodes[5].value); // Passing the text within the project name input\r\n    });\r\n\r\n    formContainer.querySelector('#cancel').addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        console.log('cancelled!');\r\n        cancelFunc();\r\n    });\r\n\r\n    return formContainer;\r\n\r\n}\r\n\r\nfunction renderTaskForm(cancelFunc, submitFunc, taskDetailsObject = {}) {\r\n    const formContainer = document.createElement('form');\r\n    formContainer.classList.add('task-project-form', 'my-4');\r\n    if (Object.keys(taskDetailsObject).length === 0) {\r\n        formContainer.innerHTML = `\r\n        <h6 class=\"text-center\">New Task</h6>\r\n\r\n        <label for=\"taskName\">Task Name</label>\r\n        <input type=\"text\" class=\"u-full-width text-input\" id=\"taskName\">\r\n\r\n        <label for=\"taskDescription\">Description</label>\r\n        <textarea class=\"u-full-width task-input\" placeholder=\"Why I need to finish this task...\" id=\"taskDescription\"></textarea>\r\n\r\n        <label for=\"taskPriority\">Priority</label>\r\n        <select class=\"u-full-width task-input\" id=\"taskPriority\">\r\n            <option value=\"Option 1\">High</option>\r\n            <option value=\"Option 2\">Medium</option>\r\n            <option value=\"Option 3\">Low</option>\r\n        </select>\r\n        \r\n        <button class=\"button-primary\" id=\"cancel\">Cancel</button>\r\n        <input class=\"button-primary\" type=\"submit\" value=\"submit\">\r\n    `\r\n    } else {\r\n        formContainer.innerHTML = `\r\n        <h6 class=\"text-center\">New Task</h6>\r\n\r\n        <label for=\"taskName\">Task Name</label>\r\n        <input type=\"text\" class=\"u-full-width text-input\" id=\"taskName\" value=\"${taskDetailsObject.name}\">\r\n\r\n        <label for=\"taskDescription\">Description</label>\r\n        <textarea class=\"u-full-width task-input\" id=\"taskDescription\">${taskDetailsObject.description}</textarea>\r\n\r\n        <label for=\"taskPriority\">Priority</label>\r\n        <select class=\"u-full-width task-input\" id=\"taskPriority\">\r\n            <option value=\"Option 1\">High</option>\r\n            <option value=\"Option 2\">Medium</option>\r\n            <option value=\"Option 3\">Low</option>\r\n        </select>\r\n        \r\n        <button class=\"button-primary\" id=\"cancel\">Cancel</button>\r\n        <input class=\"button-primary\" type=\"submit\" value=\"submit\">\r\n    `\r\n    }\r\n\r\n    formContainer.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n        console.log('submitted!');\r\n        const taskName = e.path[0].childNodes[5].value // name\r\n        const taskDesc = e.path[1].childNodes[1].childNodes[9].value // desc\r\n        const taskPriority = e.path[1].childNodes[1].childNodes[13].options[e.path[1].childNodes[1].childNodes[13].selectedIndex].innerText // prior\r\n        submitTask(taskName, taskDesc, taskPriority);\r\n    });\r\n\r\n    formContainer.querySelector('#cancel').addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        console.log('cancelled!');\r\n        cancelFunc();\r\n    });\r\n\r\n    return formContainer;\r\n}\r\n\r\n/* ========== EVENT HANDLER FUNCIONS ========== */\r\n\r\n// These Functions will call pageRenderer()\r\nfunction projectSelected(projData) {\r\n    console.log(`Selected ${projData.title}!`);\r\n    currentPageRenderer(toDoListProjectsTempData, renderSelectedProjectTasks(projData, taskSelected, taskDeleted)); \r\n}\r\n\r\nfunction projectDeleted(projTitle) {\r\n    console.log(`Deleted ${projTitle}!`);\r\n    _ToDoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deleteProject(projTitle);\r\n    toDoListProjectsTempData = _ToDoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getProjects();\r\n    const placeHolder = document.createElement('div');\r\n    currentPageRenderer(toDoListProjectsTempData, placeHolder);\r\n}\r\n\r\nfunction taskSelected(task, projData) {\r\n    console.log(`Selected ${task.name}!`);\r\n    currentPageRenderer(toDoListProjectsTempData, renderSelectedTask(task, backToProjectTasks, editTask, taskDeleted, projData));\r\n}\r\n\r\nfunction taskDeleted(taskName) {\r\n    console.log(`Deleted ${taskName}!`);\r\n    currentProject.deleteTask(taskName);\r\n    currentPageRenderer(toDoListProjectsTempData, renderSelectedProjectTasks(currentProject, taskSelected, taskDeleted));\r\n}\r\n\r\n// These functions are called on Submit of the forms\r\n    // Calls the Data Handler functions of setProject & setTask\r\n    // After creating the new project or task, calls pageRender\r\nfunction submitProject(projectName) {\r\n    if (currentProject === null) {\r\n        _ToDoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"].addProject(new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"](projectName));\r\n        toDoListProjectsTempData = _ToDoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getProjects(); // Needed to re-initialize the projects\r\n        const placeHolder = document.createElement('div');\r\n        currentPageRenderer(toDoListProjectsTempData, placeHolder);\r\n    } else {\r\n        _ToDoList__WEBPACK_IMPORTED_MODULE_2__[\"default\"].updateProject(currentProject, projectName);\r\n        updateCurrentProject(null);\r\n        const placeHolder = document.createElement('div');\r\n        currentPageRenderer(toDoListProjectsTempData, placeHolder);\r\n    }\r\n}\r\n\r\nfunction submitTask(taskName, taskDesc, taskPriority) {\r\n    if (currentTask === null) {\r\n        const newTask = new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskName);\r\n        newTask.setDescription(taskDesc);\r\n        newTask.setPriority(taskPriority);\r\n        currentProject.addTask(newTask);\r\n        updateCurrentTask(null);\r\n        backToProjectTasks(currentProject);\r\n    } else {\r\n        currentProject.updateTask(currentTask, taskName, taskDesc, taskPriority);\r\n        updateCurrentTask(null);\r\n        backToProjectTasks(currentProject);\r\n    }\r\n}\r\n\r\nfunction editTask(taskDetailsObj) {\r\n    currentPageRenderer(toDoListProjectsTempData, renderTaskForm(cancelForm, submitTask, taskDetailsObj));\r\n}\r\n\r\n\r\nfunction cancelForm() {\r\n    const placeHolder = document.createElement('div');\r\n    currentPageRenderer(toDoListProjectsTempData, placeHolder);\r\n}\r\n\r\nfunction backToProjectTasks(project) {\r\n    currentPageRenderer(toDoListProjectsTempData, renderSelectedProjectTasks(project, taskSelected, taskDeleted));\r\n}\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://todolistproject/./src/modules/RenderUI.js?");

/***/ }),

/***/ "./src/modules/Task.js":
/*!*****************************!*\
  !*** ./src/modules/Task.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\r\nclass Task {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.description = '';\r\n        this.priority = '';\r\n    }\r\n\r\n    getName() {\r\n        return this.name;\r\n    }\r\n\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n    setDescription(description) {\r\n        this.description = description;\r\n    }\r\n\r\n    getPriority() {\r\n        return this.priority;\r\n    }\r\n\r\n    setPriority(priority) {\r\n        this.priority = priority;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Task);\n\n//# sourceURL=webpack://todolistproject/./src/modules/Task.js?");

/***/ }),

/***/ "./src/modules/ToDoList.js":
/*!*********************************!*\
  !*** ./src/modules/ToDoList.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Project__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Project */ \"./src/modules/Project.js\");\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Task */ \"./src/modules/Task.js\");\n\r\n\r\n\r\nclass ToDoList {\r\n    constructor() {\r\n        this.projects = [];\r\n    }\r\n\r\n    getProjects() {\r\n        return this.projects;\r\n    }\r\n\r\n    getProject(projectName) {\r\n        return this.projects.find((project) => project.getTitle() === projectName);\r\n    }\r\n\r\n    addProject(newProject) {\r\n        if (this.projects.find((project) => project.getTitle() === newProject.getTitle())) return;\r\n        this.projects.push(newProject)\r\n    }\r\n\r\n    deleteProject(projectName) {\r\n        this.projects = this.projects.filter(project => project.getTitle() !== projectName);\r\n    }\r\n\r\n    updateProject(currentProject, newProjectName) {\r\n        const proj = this.projects.find((project) => project.getTitle() === currentProject.getTitle());\r\n        this.deleteProject(currentProject.getTitle());\r\n        proj.setTitle(newProjectName);\r\n        this.projects.push(proj);\r\n    }\r\n\r\n}\r\n\r\n// This is the \"Temp Storage\"\r\n\r\nconst ToDoListTemp = new ToDoList();\r\n\r\nconst tempProject1 = new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"test1\");\r\nconst tempProject2 = new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"test2\"); \r\nconst tempProject3 = new _Project__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"test3\"); \r\n\r\nconst tast1 = new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"cwinge\");\r\ntast1.setDescription(\"OOOOOOOOOOOOOOOOOGA\");\r\ntast1.setPriority(\"High\");\r\n\r\nconst tast2 = new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"fgnaifgnaEIOLfnile\");\r\ntast2.setDescription(\"OOOOOOOawdaFAEFASEfASEFGOOOOOOOOOGA\");\r\ntast2.setPriority(\"Low\");\r\n\r\nconst tast3 = new _Task__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"vyak\");\r\ntast2.setDescription(\"deeznuts\");\r\ntast2.setPriority(\"Low\");\r\n\r\ntempProject1.addTask(tast1);\r\ntempProject2.addTask(tast2);\r\ntempProject3.addTask(tast3);\r\n\r\nToDoListTemp.addProject(tempProject1);\r\nToDoListTemp.addProject(tempProject2);\r\nToDoListTemp.addProject(tempProject3);\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ToDoListTemp);\n\n//# sourceURL=webpack://todolistproject/./src/modules/ToDoList.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;